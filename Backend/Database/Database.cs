using Backend.Model;
using System.Data.Common;
using System.Data.SQLite;
using Backend.Recordsource;
using Backend.Exceptions;
using Backend.Utils;
using System.Data;
using System.Reflection;

namespace Backend.Database
{
    /// <summary>
    /// Interface that defines the properties and methods that a Database class shoud implement.
    /// </summary>
    public interface IAbstractDatabase
    {
        /// <summary>
        /// Gets and Sets the Version of the Database.
        /// </summary>
        /// <value>A string telling which version of the database is used.</value>
        public string Version { get; set; }

        /// <summary>
        /// Gets and Sets the name of the Database to connect to..
        /// </summary>
        /// <value>A string telling which name of the database.</value>
        public string DatabaseName { get; set; }

        /// <summary>
        /// Gets or Sets the <see cref="ISQLModel"/> the database must refer to.
        /// Set this property to take advantage of auto-generated queries built by <see cref="QueryBuilder"/>.
        /// </summary>
        /// <value>An object implementing <see cref="ISQLModel"/> or extending <see cref="AbstractSQLModel"/>.</value>
        public ISQLModel Model { get; set; }

        /// <summary>
        /// Gets and sets the Recordsource containing the records yield by 
        /// the <see cref="Retrieve(string?, List{QueryParameter}?)"/> 
        /// or the <see cref="RetrieveAsync(string?, List{QueryParameter}?)"/>.<para/>
        /// 
        /// </summary>
        /// <value>A Recordsource object</value>
        public RecordSource? Records { get; set; }

        /// <summary>
        /// This method should return a string representing the connection string to the Database.
        /// </summary>
        /// <returns>A string</returns>
        public string ConnectionString();

        /// <summary>
        /// It creates a DBConnection object that handles the connection to the database.
        /// <para/>
        /// For Example:
        /// <code>
        ///     return new SQLiteConnection(ConnectionString());
        /// </code>
        /// see also the <seealso cref="ConnectionString"/>
        /// </summary>
        /// <returns>A <see cref="DbConnection"/> object</returns>
        public Task<DbConnection> ConnectAsync();

        /// <summary>
        /// It creates a DBConnection object that handles the connection to the database.
        /// <para/>
        /// For Example:
        /// <code>
        ///     return new SQLiteConnection(ConnectionString());
        /// </code>
        /// see also the <seealso cref="ConnectionString"/>
        /// </summary>
        /// <returns>A <see cref="DbConnection"/> object</returns>
        public DbConnection Connect();

        /// <summary>
        /// This method select the data from the database.
        /// <para/>
        /// Parameters: <para/>
        /// <list type="bullet">
        /// <item>
        ///<term><paramref name="sql"/></term>
        ///<description>if null, the <see cref="Model"/> property sets this parameter to the SQL Statement generated by <see cref="QueryBuilder"/>. Otherwise, you can provide your own Select Statement.</description>
        ///</item>
        /// <item>
        ///<term><paramref name="parameters"/></term>
        ///<description>If null, the <see cref="Model"/> property sets this parameter to the <see cref="ISQLModel.SetParameters(List{IParameterObject}?)"/>. defined in your class. Otherways you can provide your own <c>List&lt;IParameterObject&gt;"</c> </description>
        ///</item>
        /// </list>
        /// </summary>
        /// <param name="sql">The select statement, it can be null</param>
        /// <param name="parameters"> A List of object parameter, it can be null</param>
        /// <returns> a IEnumerable&lt;<see cref="ISQLModel"/>&gt; object which can be used to create a <see cref="RecordSource"/></returns>
        /// <exception cref="NoModelException">Thrown if the <see cref="Model"/> is null.</exception>
        public IEnumerable<ISQLModel> Retrieve(string? sql = null, List<QueryParameter>? parameters = null);

        public IAsyncEnumerable<ISQLModel> RetrieveAsync(string? sql = null, List<QueryParameter>? parameters = null);

        /// <summary>
        /// This method performs a CRUD operation against the database.
        /// <para/>
        /// Parameters: <para/>
        /// <list type="bullet">
        /// <item>
        /// <term><paramref name="crud"/></term>
        /// <description>a <see cref="CRUD"/> enum that tells what kind of CRUD operation must be performed.</description>
        /// </item>
        /// <item>
        ///<term><paramref name="sql"/></term>
        ///<description>If null, the <see cref="Model"/> property sets this parameter to the SQL Statement generated by <see cref="QueryBuilder"/>. Otherwise, you can provide your own CRUD Statement.</description>
        ///</item>
        /// <item>
        ///<term><paramref name="parameters"/></term>
        ///<description>If null, the <see cref="Model"/> property sets this parameter to the <see cref="ISQLModel.SetParameters(List{IParameterObject}?)"/>. defined in your class. Otherways you can provide your own <c>List&lt;IParameterObject&gt;"</c> </description>
        ///</item>
        /// </list>
        /// </summary>
        /// <param name="sql">The select statement, it can be null</param>
        /// <param name="parameters"> A List of object parameter, it can be null</param>
        /// <exception cref="NoModelException">Thrown if the <see cref="Model"/> is null.</exception>
        public void Crud(CRUD crud, string? sql = null, List<QueryParameter>? parameters = null);

        /// <summary>
        /// It performs an aggregate query against the database. This method is meant to return one value only.
        /// <para/>
        /// Parameters:
        /// <list type="bullet">
        /// <item>
        ///<term><paramref name="parameters"/></term>
        ///<description>null if your statement does not rely on parameters. This method won't use the <see cref="ISQLModel.SetParameters(List{IParameterObject}?)"/></description>
        ///</item>
        /// </list>
        /// </summary>
        /// <param name="sql">The statement the perform the aggregate function</param>
        /// <param name="parameters">A List of object parameter, it can be null</param>
        /// <returns>An object representing the result of an aggregate function.</returns>
        public object? AggregateQuery(string sql, List<QueryParameter>? parameters = null);

        /// <summary>
        /// It performs a Count query against the database. This method is meant to return one value only.
        /// <para/>
        /// Parameters:
        /// <list type="bullet">
        /// <item>
        ///<term><paramref name="sql"/></term>
        ///<description>If null but the <see cref="Model"/> property is set, it sets this parameter to the SQL Count Statement generated by <see cref="QueryBuilder"/>. Otherwise, you can provide your own CRUD Statement.</description>
        ///</item>
        /// <item>
        ///<term><paramref name="parameters"/></term>
        ///<description>null if your statement does not rely on parameters. This method won't use the <see cref="ISQLModel.SetParameters(List{IParameterObject}?)"/></description>
        ///</item>
        /// </list>
        /// </summary>
        /// <param name="sql">The statement the perform the count function</param>
        /// <param name="parameters">A List of object parameter, it can be null</param>
        /// <returns>How many records the query returned.</returns>
        public long? CountRecords(string? sql = null, List<QueryParameter>? parameters = null);
    }

    /// <summary>
    /// AbstractClass that defines the structure that any Database Class should use. This class implements <see cref="IAbstractDatabase"/>.
    /// </summary>
    abstract public class AbstractDatabase(ISQLModel Model) : IAbstractDatabase
    {
        public virtual string Version { get; set; } = string.Empty;
        public virtual string DatabaseName { get; set; } = string.Empty;
        public ISQLModel Model { get; set; } = Model;
        public RecordSource? Records { get; set; }
        public abstract string ConnectionString();
        public abstract DbConnection Connect();
        public Task<DbConnection> ConnectAsync() => Task.FromResult(Connect());
        private void SetCommand(DbCommand cmd, string sql, List<QueryParameter>? parameters) 
        {
            if (Model == null) throw new NoModelException();
            cmd.CommandText = sql;
            if (parameters == null)
            {
                parameters = [];
                Model.SetParameters(parameters);
            }

            SetParameters(cmd, parameters);
        }

        public async IAsyncEnumerable<ISQLModel> RetrieveAsync(string? sql = null, List<QueryParameter>? parameters = null)
        {
            if (Model == null) throw new NoModelException();

            if (string.IsNullOrEmpty(sql))
                sql = Model.SelectQry;

            sql += ";";
            using (var connection = await ConnectAsync())
            {
                await connection.OpenAsync();
                    using (var cmd = connection.CreateCommand())
                    {
                        SetCommand(cmd, sql, parameters);
                        using (var reader = await cmd.ExecuteReaderAsync())
                        {
                            while (await reader.ReadAsync())
                                yield return Model.Read(reader);
                        }
                    }
            }
        }

        public IEnumerable<ISQLModel> Retrieve(string? sql = null, List<QueryParameter>? parameters = null)
        {
            if (Model == null) throw new NoModelException();

            if (string.IsNullOrEmpty(sql))
                sql = Model.SelectQry;
            sql += ";";
            using (var connection = Connect())
            {
                connection.Open();
                using (var transaction = connection.BeginTransaction()) {
                    using (var cmd = connection.CreateCommand())
                    {
                        cmd.Transaction = transaction;
                        SetCommand(cmd, sql, parameters);
                        using (var reader = cmd.ExecuteReader())
                        {
                            while (reader.Read())
                                yield return Model.Read(reader);
                        }
                    }
                    transaction.Commit();
                }
            }
        }

        public void Crud(CRUD crud, string? sql = null, List<QueryParameter>? parameters = null)
        {
            if (Model == null) throw new NoModelException();

            if (crud == CRUD.INSERT || crud == CRUD.UPDATE) 
                if (!Model.AllowUpdate()) throw new Exception("Conditions for update not met.");

            long? lastID = null;
            if (string.IsNullOrEmpty(sql)) 
            {
                switch (crud)
                    {
                        case CRUD.INSERT:
                            sql = Model.InsertQry;
                            break;
                        case CRUD.UPDATE:
                            sql = Model.UpdateQry;
                            break;
                        case CRUD.DELETE:
                            sql = Model.DeleteQry;
                            break;
                    }
            }

            using (var connection = Connect())
            {
                connection.Open();
                using (var transaction = connection.BeginTransaction())
                {
                    using (var cmd = connection.CreateCommand())
                    {
                        cmd.Transaction = transaction;
                        SetCommand(cmd, sql!, parameters);
                        cmd.ExecuteNonQuery();
                        lastID = (crud == CRUD.INSERT) ? RetrieveLastInsertedID(connection, transaction, LastIDQry()) : null;
                    }
                    try
                    {
                        transaction.Commit();
                        if (lastID!=null)
                            Model?.GetTablePK()?.SetValue(lastID);
                        UpdateRecords();
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine("An error occurred: " + ex.Message);
                        transaction?.Rollback();
                    }
                }
            }
        }
        public long? CountRecords(string? sql = null, List<QueryParameter>? parameters = null) 
        {
            if (string.IsNullOrEmpty(sql) && Model != null)
                sql = Model.RecordCountQry + ";";
            if (string.IsNullOrEmpty(sql)) throw new Exception("No SQL Statement provided");
            return (long?)AggregateQuery(sql, parameters);
        }
        public object? AggregateQuery(string sql, List<QueryParameter>? parameters = null) 
        {
            object? value = null;
            using (DbConnection connection = Connect())
            {
                connection.Open();
                using (DbTransaction transaction = connection.BeginTransaction())
                {
                    using (DbCommand cmd = connection.CreateCommand())
                    {
                        cmd.CommandText = sql;
                        cmd.Transaction = transaction;
                        SetParameters(cmd, parameters);
                        value = cmd.ExecuteScalar();
                    }
                    try
                    {
                        transaction.Commit();
                        return value;
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine("An error occurred: " + ex.Message);
                        return value;
                    }
                }
            }
        }
        private static long? RetrieveLastInsertedID(DbConnection connection, DbTransaction transaction, string sql)
        {
            using (var cmd = connection.CreateCommand())
            {
                cmd.CommandText = sql;
                cmd.Transaction = transaction;
                return (long?)cmd.ExecuteScalar();
            }
        }

        private static void SetParameters(DbCommand cmd, List<QueryParameter>? parameters) 
        {
            if (parameters == null) return;

            foreach (var parameter in parameters) 
            {
                DbParameter param = cmd.CreateParameter();
                param.ParameterName = $"@{parameter.Placeholder}";
                param.Value = parameter.Value;
                cmd.Parameters.Add(param);
            }
        }

        /// <summary>
        /// Override this method to return the correct statement to retrieve the last inserted id.
        /// </summary>
        /// <returns>A string representing the SQL Statement to retrieve the last inserted id.</returns>
        protected abstract string LastIDQry();

        private void UpdateRecords() 
        {
            if (Records == null) return;
            if (Model.IsNewRecord()) Records.Add(Model);
            int index = Records.IndexOf(Model);
            if (index >= 0) Records[index] = Model;
        }
    }

    /// <summary>
    /// This class is a concrete definition of <see cref="AbstractDatabase"/> meant for dealing with a SQLite database.
    /// </summary>
    public class SQLiteDatabase(ISQLModel Model) : AbstractDatabase(Model)
    {
        public override string Version { get; set; } = "3";
        public override string DatabaseName { get; set; } = "Data/mydb.db";
        public override string ConnectionString() => $"Data Source={DatabaseName};Version={Version};"; 
        protected override string LastIDQry() => "SELECT last_insert_rowid()";

        public override DbConnection Connect() 
        {
            //If the software is published as SingleFile, the SQLite connection must be established through external Assembly.
            //It is important that you call Sys.LoadEmbeddedDll("System.Data.SQLite"); on Application' startup.
            Assembly? assembly = Sys.LoadedDLL.FirstOrDefault(s => s.Name.Equals("System.Data.SQLite"))?.Assembly;
            if (assembly == null) return new SQLiteConnection(ConnectionString()); //if the assembly is null, it is assumed the application is not published as single file.
            //Attempt to create an instance of IDBConnection through the assembly.
            IDbConnection? connection = (IDbConnection?)assembly.CreateInstance("System.Data.SQLite.SQLiteConnection") ?? throw new Exception("Failed to create a connection object from LoadedAssembly");
            connection.ConnectionString = ConnectionString(); //set the connection string.
            return (DbConnection)connection;
        } 
    }
}
